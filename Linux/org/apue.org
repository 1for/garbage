* 2 UNIX标准化与实现
** UNIX标准化
*** ISO C
|------------+--------------------------|
| 头文件     | 说明                     |
|------------+--------------------------|
| assert.h   | 验证程序断言             |
| complex.h  | 支持复数算术运算         |
| ctype.h    | 字符类型                 |
| errno.h    | 出错码                   |
| fenv.h     | 浮点环境                 |
| float.h    | 浮点常量                 |
| inttypes.h | 整型格式转换             |
| iso646.h   | 替换关系操作符宏         |
| limits.h   | 实现常量                 |
| locale.h   | 局部常量                 |
| math.h     | 数学常量                 |
| setjmp     | 非局部goto               |
| signal.h   | 信号                     |
| stdarg.h   | 可变参数表               |
| stdbool.h  | 布尔类型和值             |
| stddef.h   | 标准定义                 |
| stdint.h   | 整型                     |
| stdio.h    | 标准I/O库                |
| stdlib.h   | 实用程序函数             |
| string.h   | 字符串操作               |
| tgmath.h   | 通用类型数学宏           |
| time.h     | 时间和日期               |
| wchar.h    | 扩展的多字节和宽字节支持 |
| wctype.h   | 宽字符分类和映射支持     |
|------------+--------------------------|
*** POSIX
POSIX包含了以上ISO C的标准库，其他如下：
1. POSIX标准定义的必须的头文件
|---------------+--------------------|
| dirent.h      | 目录项             |
| fcntl.h       | 文件控制           |
| fnmatch.h     | 文件名匹配类型     |
| glob.h        | 路径名模式匹配类型 |
| grp.h         | 组文件             |
| netdb.h       | 网络数据库操作     |
| pwd.h         | 口令文件           |
| regex.h       | 正则表达式         |
| tar.h         | tar归档值          |
| termios.h     | 终端I/O            |
| unistd.h      | 符号常量           |
| utime.h       | 文件时间           |
| wordexp.h     | 字扩展类型         |
| arpa/inet.h   | Internet定义       |
| net/if.h      | 套接字本地接口     |
| netinet/in.h  | Internet地址簇     |
| netinet/tcp.h | 传输控制协议定义   |
| sys/mman.h    | 内存管理声明       |
| sys/select.h  | select函数         |
| sys/socket.h  | 套结字接口         |
| sys/stat.h    | 文件状态           |
| sys/times.h   | 进程时间           |
| sys/types.h   | 基本系统数据类型   |
| sys/un.h      | UNIX域套接字定义   |
| sys/utsname.h | 系统名             |
| sys/wait.h    | 进程控制           |
|---------------+--------------------|
2. POSIX标准定义的XSI扩展头文件
| 头文件         | 说明                 |
|----------------+----------------------|
| cpio.h         | cpio归档值           |
| dlfcn.h        | 动态链接             |
| fmtmsg.h       | 消息显示结构         |
| ftw.h          | 文件树漫游           |
| iconv.h        | 代码集转换使用程序   |
| langinfo.h     | 语言信息常量         |
| monetary.h     | 货币类型             |
| ndbm.h         | 数据库操作           |
| nl_types.h     | 消息类别             |
| pool.h         | 轮询函数             |
| search.h       | 搜索表               |
| strings.h      | 字符串操作           |
| syslog.h       | 系统出错日志记录     |
| ucontext.h     | 用户上下文           |
| ulimit.h       | 用户限制             |
| utmpx.h        | 用户账户数据库       |
| sys/ipc.h      | IPC                  |
| sys/msg.h      | 消息队列             |
| sys/resource.h | 资源操作             |
| sys/sem.h      | 信号量               |
| sys/shm.h      | 共享存储             |
| sys/statvfs.h  | 文件系统信息         |
| sys/time.h     | 时间类型             |
| sys/timeb.h    | 附加的日期和时间定义 |
| sys/uio.h      | 矢量I/O操作          |
|----------------+----------------------|
3. POSIX标准定义的可选头文件
| 头文件      | 说明            |
|-------------+-----------------|
| aio.h       | 异步I/O         |
| mqueue.h    | 消息队列        |
| pthread.h   | 线程            |
| sched.h     | 执行调度        |
| semaphore.h | 信号量          |
| spawn.h     | 实现spawn接口   |
| stropts.h   | XSI STREAMS接口 |
| trace.h     | 事件跟踪        |
|-------------+-----------------|
** 限制
1. 编译时限制（头文件）
2. 不与文件和目录相关联的运行时限制（sysconf函数）
3. 与文件和目录相关联的运行时限制（pathconf和fpathconf函数）
** 基本系统数据类型
| 类型         | 说明                         |
|--------------+------------------------------|
| caddr_t      | 核心地址                     |
| clock_t      | 时钟滴答计时器               |
| comp_t       | 压缩的时钟滴答               |
| dev_t        | 设备号（主和次）             |
| fd_set       | 文件描述符集                 |
| fpos_t       | 文件位置                     |
| gid_t        | 数值组ID                     |
| ino_t        | i节点编号                    |
| mode_t       | 文件类型，文件创建模式       |
| nlink_t      | 目录项的链接计数             |
| off_t        | 文件大小和偏移量（带符号的） |
| pid_t        | 进程ID和进程组ID             |
| ptrdiff_t    | 两个指针相减的结果           |
| rlim_t       | 资源限制                     |
| sig_atomic_t | 能原子地访问的数据类型       |
| sigset_t     | 信号集                       |
| size_t       | 对象大小                     |
| ssize_t      | 返回字节计数的函数           |
| time_t       | 日历时间的秒计数器           |
| uid_t        | 用户ID                       |
| wchar_t      | 能表示所有的字符码           |
|--------------+------------------------------|
* 3 文件I/O
** 文件描述符
STDIN_FILENO 0
STDOUT_FILENO 1
STDERR_FILENO 2
文件描述符的变化范围是0~OPEN_MAX
** I/O的效率
TODO 预读技术
** 文件共享
1. 每个进程在进程表中都有一个记录项，记录项中包含有一张打开文件描述符表，可将其视为一个矢量，每个描述符占用一项。与每个文件描述符相关联的是：
   a) 文件描述符标志
   b) 指向一个文件表项的指针
2. 内核为所有打开文件维持一张文件表。每个文件表项包含：
   a) 文件状态标志（读、写、添写、同步和非阻塞等）
   b) 当前文件偏移量
   c) 指向该文件v节点表项的指针
3. 每个打开文件都有一个v节点结构
** 文件原子操作
#include<unistd.h>
ssize_t pread(int filedes, void *buf, size_t nbytes, off_t offset);
ssize_t pwrite(int filedes, const void *buf, size_t nbytes, off_t offset);
** dup和dup2函数
int dup(int filedes);
int dup2(int filedes1,int filedes2);
复制文件描述符，实际上两个文件描述符包含同样的文件表
** sync、fsync和fdatasync函数
**** sync
void sync(void) 
将所有修改过的块缓冲区排入写队列
系统守护进程会周期性地调用sync（每隔30s）
**** fsync
int fsync(int filedes)
针对指定的文件描述符，等待写磁盘操作结束，然后返回
同时更新文件的属性
**** fdatasync
int fdatasync(int filedes)
与fsync的区别是它只影响文件的数据部分
** fcntl函数
int fcntl(int filedes,int cmd, ... /* arg */)
改变已打开文件的性质，包含5种功能：
1. 复制一个现有的描述符(cmd=F_DUPFD)
2. 获得/设置文件描述符标记(cmd=F_GETFD或F_SETFD)
3. 获得/设置文件状态标志(cmd=F_GETFL或F_SETFL)
4. 获得/设置异步I/O所有权(cmd=F_GETOWN或F_SETOWN)
5. 获得/设置记录锁(cmd=F_GETLK、F_SETLK或F_SETLIKW)
** /dev/fd
在shell下单独一个字符'-'解释为标准输入
** 习题
6 如果使用添加标志打开文件读、写，读可以从任意位置读，但是写只能从最后开始写



* 4 文件和目录
** stat函数
struct stat{
  mode_t st_mode;
  ino_t  st_ino;
  dev_t  st_dev;
  dev_t  st_rdev;
  nlink_t  st_nlink;
  uid_t  st_uid;
  gid_t  st_gid;
  time_t st_atime;
  time_t st_mtime;
  time_t st_ctime;
  blksize_t st_blksize;
  blkcnt_t st_blocks;
}
** 文件类型
1 普通文件 /etc/passwd
2 目录文件 /etc
3 块特殊文件 /dev/scsi/host0/bus0/target0/lun0/cd
4 字符特殊文件 /dev/tty
5 FIFO /dev/initctl
6 套接字 /dev/log
7 符号链接 /dev/cdrom
** 文件访问权限
为了打开文件/usr/include/stdio.h，需要对目录/、/usr和/usr/include具有执行权限。然后具有对该文件本身的适当权限，这取决于以何种模式打开它。
当一个目录是我们要访问的文件的路径名的一个组成部分时，对该目录的执行权限使我们可通过该目录（也就是搜索该目录，寻找一个特定的文件名）
为了在一个目录中创建一个新文件，必须对该目录具有写权限和执行权限
为了删除一个现有的文件，必须对包含该文件的目录具有写权限和执行权限，对该文件本身则不需要有读、写权限
** 新文件和目录的所有权
新文件的用户ID设置为进程的有效用户ID
新文件的组ID可以是进程的有效组ID或者它所在目录的组ID
** access函数
int access(const char *pathname,int mode)
| mode | 说明             |
|------+------------------|
| R_OK | 测试读权限       |
| W_OK | 测试写权限       |
| X_OK | 测试执行权限     |
| F_OK | 测试文件是否存在 |
|------+------------------|
** umask函数
mode_t umask(mode_t cmask);
为进程设置文件模式创建屏蔽字，并返回以前的值
** 粘住位
   在交换区保存程序正文（若系统支持），限制在目录中删除和更名文件
   如果对一个目录设置了粘住位，则只有对该目录具有写权限的用户拥有此文件或这拥有此目录，或者是超级用户的时候才能删除或更名该目录下的文件
** 文件截短
int truncate(const char *pathname, off_t length);
int ftruncate(int filedes. off_t length);
** 文件系统
磁盘->分区->文件系统->柱面组->(i节点数组,目录块和数据块)
不同文件系统维护各自的i节点号
** link unlink remove rename
int link(const char *existpath,const char *newpath);创建现有文件的链接，其实是创建一个新的目录项
int unlink(const char *existpath);删除目录项，此时磁盘剩余空间会变大
使用符号链接可能在文件系统中引入循环
** 文件的时间
| 字段     | 说明                  | 例子         | ls(1)选项 |
|----------+-----------------------+--------------+-----------|
| st_atime | 文件数据最后访问时间  | read         | -u        |
| st_mtime | 文件数据最后修改时间  | write        | 默认      |
| st_ctime | i节点状态最后修改时间 | chmod、chown | -c        |
|----------+-----------------------+--------------+-----------|
** 设备特殊文件
每个文件系统所在的存储设备都由其主、此设备号表示
主设备号标识设备驱动程序
次设备号标识特定的子设备号


* 5 标准I/O
** 缓冲
全缓冲
行缓冲
不带缓冲
各种Unix系统实现的惯例：标准出错是不带缓冲的，打开至终端设备的流是行缓冲的，其他所有流则是全缓冲的
** 读写函数
|              | 读                     | 写                                                           |
|--------------+------------------------+--------------------------------------------------------------|
| 每次一个字符 | getc、fgetc、getchar   | putc、fputc、putchar                                         |
| 每次一行     | fgets、gets            | fputs、puts                                                  |
| 二进制I/O    | fread                  | fwrite                                                       |
| 格式化       | scanf、fscanf、sscanf  | printf、fprintf、sprintf、snprintf                           |
|              | vscanf、vscanf、vscanf | vprintf、vprintf、vsprintf、vsnprintf（可变参数使用arg代替） |
** 实现细节
标准I/O库最终都要调用文件I/O相关例程




* 10 信号
** signal函数
void (*signal(int signo, void (*func (int))) (int);
** 不靠谱的信息，信号丢失
** kill和raise函数
kill函数将信号发送给进程或进程组
raise函数则允许进程向自身发送信号
** alarm和pause函数
alarm函数设置计时器，超时产生SIGALRM信号,若不忽略不捕捉该信息，默认将终止调用alarm的进程
pause函数使调用进程挂起，直到捕捉到一个信号

* 11 线程
** 线程概念
进程的所有信息对该进程的所有线程都是共享的，包括可执行的程序文本、程序的全局内存和堆内存、栈以及文件描述符
** 线程终止
1 线程只是从启动例程中返回，返回值是线程的退出码
2 线程可以被同一进程中的其他线程取消
3 线程调用pthread_exit
** 线程同步
1. 互斥量
2. 避免死锁
3. 读写锁
4. 条件变量
* 12 线程控制（跳过）
* 13 守护进程
** 编程规则
1 设置屏蔽字0
2 调用fork，是父进程退出
3 调用setsid创建一个新会话
4 将当前工作目录更改为根目录
5 关闭不再需要的文件描述符
** 单实例守护进程
文件锁和记录锁
** 守护进程的惯例
1 若守护进程使用锁文件，通常存放在/var/run

 
* 14 高级I/O
** 非阻塞I/O
** 记录锁
*** fcntl记录锁
int fcntl(int fields,int cmd, .../* struct flock *flockptr */);
*** 锁的隐含继承和释放
**** 锁与进程和文件两方面有关
1 当一个进程终止时，它锁建立的锁全部释放
2 任何时候关闭一个描述符时，则该进程通过这一描述符可以引用的文件上的任何一把锁都被释放

**** 由fork产生的子进程不继承父进程所设置的锁
**** 在执行exec后，新程序可以继承原执行程序的锁
如果对一个文件描述符设置了close-on-exec标志，那么当作为exec的一部分关闭该文件描述符时，对相应文件的所有所都被释放了

**** 在文件尾端加锁
** STREAMS
** I/O多路转接
*** select
非阻塞，异步通知
*** poll
** 异步I/O
** readv和writev函数
散步读、聚集写
** readn和writen函数
多次读写一段数据
** 存储映射I/O
* 15 进程间通信
** 管道
** 协同进程
** FIFO
FIFO是一种文件类型
** 消息队列
消息的链接表，存放在内核中并由消息队列标识符标识。
** 信号量
信号量是一个计数器，用于多进程对共享数据对象的访问。
与记录锁的对比
** 共享存储
共享存储允许两个或更多进程共享一给定的存储区。通常，信号量被用来实现对共享存储访问的同步。
* 16 网络IPC：套接字
套接字是通信端口的抽象。与使用文件描述符访问文件一样，访问套接字也需要用套接字描述符。套接字描述符在UNIX系统是用文件描述符实现的。许多处理文件描述符的函数都可以处理套接字描述符。
** 创建套接字
int socket(int domain,int type,int protocol);
domain 套接字通信域，AF_INET IPv4因特网域 |AF_INET6 IPv6因特网域 |AF_UNIX UNIX域 |AF_UNSPEC 未指定
type 套接字类型
| SOCK_DGRAM     | 长度固定的、无链接的不可靠报文传递  |
| SOCK_RAW       | IP协议的数据报接口（POSIX.1中为可选 |
| SOCK_SEQPACKET | 长度固定、有序、可靠的面向连接报文传递 |
| SOCK_STREAM    | 有序、可靠、双向的面向连接字节流       |
protocol 通常为0，按给定的域和套接字类型选择默认协议

